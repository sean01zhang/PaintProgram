/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paintprogram;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.Timer;
import shape.Circle;
import shape.Line;
import shape.Point;
import shape.Rectangle;
import shape.Shape;
import shape.Triangle;

/**
 *
 * @author Sean and only sean
 */
public class PaintingPanel extends javax.swing.JPanel {
    
    //the x and y positon of where the mouse was pressed and where it was released.
    int x1, y1, x2, y2;
    Timer t1;

    //the mode of the drawMode
    MODE mode;
    //the varaible that keeps track of which layer is selected.
    private int layerNumber = 1;

    //for preview shapes
    Shape preview;

    //creates a color arraylist that stores all the colors of each individual layer
    ArrayList<Color> colors = new ArrayList();

    //creates a 2D arraylist to store the shapes and then the layers that store the shapes.
    ArrayList<ArrayList<Shape>> layers = new ArrayList();

    /**
     * The constructor for the paintingPanel.
     */
    public PaintingPanel() {
        //inits graphical components.
        initComponents();
        //creates two new blank layers to start with black foregrounds
        layers.add(new ArrayList<>());
        layers.add(new ArrayList<>());
        colors.add(Color.BLACK);
        colors.add(Color.BLACK);
        //starts the timer.
        t1 = new Timer(5, new TimerListener());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 335, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This is called when the mouse is dragged.
     * @param evt the mouse event
     */
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        //gets the xy coordinate of where the mouse was dragged
        x2 = evt.getX();
        y2 = evt.getY();
        
        switch (mode) {
            case RECTANGLE:
                //creates a preview rectangle based on the xy coordinates of the mouse.
                preview = new Rectangle(x1, y1, (x2 - x1), (y1 - y2));
                break;
            case CIRCLE:
                //creates a preview circle based on the xy coordinates of the mouse.
                preview = new Circle(x1, y1, Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1)));
                break;
            case TRIANGLE:
                //creates a preview triangle based on the xy coordinates of the mouse.
                preview = new Triangle(x1, y1, x2 - x1, y2 - y1);
                break;
            case SQUARE:
                //creates a preview square based on the maximum xy coordinates of the mouse.
                int max = Math.max(Math.abs(x2 - x1), Math.abs(y1 - y2));
                int x3, y3;
                if (x2 < x1) {
                    x3 = -max;
                } else {
                    x3 = max;
                }
                if (y2 > y1) {
                    y3 = -max;
                } else {
                    y3 = max;
                }
                preview = (new Rectangle(x1, y1, x3, y3));
                break;
            case FREEHAND:
                //creates a new line from point to point based on the xy coordinates of the mouse.
                layers.get(layerNumber).add(new Line(x1,y1,x2,y2));
                //reassigns the current xy to the old xy
                x1=x2;
                y1=y2;
                break;
            case LINE:
                //creates a preview line based on the xy coordinates of the mouse.
                preview = (new Line(x1, y1, evt.getX(), evt.getY()));
                break;
        }
    }//GEN-LAST:event_formMouseDragged

    /**
     * This is called when the mouse initially clicks on the JPanel.
     * @param evt the mouse event
     */
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        //gets the initial mouse coordinate of where the mouse clicked
        x1 = evt.getX();
        y1 = evt.getY();
    }//GEN-LAST:event_formMousePressed

    /**
     * This is called when the mouse is released from holding down.
     * @param evt the mouse event.
     */
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        
        //gets the final mouse position of the cursor.
        x2 = evt.getX();
        y2 = evt.getY();
        
        switch (mode) {
            case MOVE:
                //checks if the layer has nothing in it. If so, the program does not need to 
                //move anything.
                if (layers.get(layerNumber).size() >0) {
                    for (int i = 0; i < layerNumber; i++) {
                        if (layers.get(layerNumber).get(i).contains(new Point(x1, y1))) {
                            //translates every shape by the certain factor.
                            layers.get(layerNumber).get(i).translate(x2 - x1, y2 - y1);
                        }
                    }
                }
                break;
            case RECTANGLE:
                //creates a new rectangle using the four point values collected.
                layers.get(layerNumber).add(new Rectangle(x1, y1, (x2 - x1), (y1 - y2)));
                preview = null;
                break;
            case CIRCLE:
                layers.get(layerNumber).add(new Circle(x1, y1, Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1))));
                preview = null;
                break;
            case TRIANGLE:
                layers.get(layerNumber).add(new Triangle(x1, y1, (x2 - x1), (y2 - y1)));
                preview = null;
                break;
            case SQUARE:
                int max = Math.max(Math.abs(x2 - x1), Math.abs(y1 - y2));
                int x3, y3;
                if (x2 < x1) {
                    x3 = -max;
                } else {
                    x3 = max;
                }
                if (y2 > y1) {
                    y3 = -max;
                } else {
                    y3 = max;
                }
                preview = (new Rectangle(x1, y1, x3, y3));
                
                layers.get(layerNumber).add(new Rectangle(x1, y1, x3, y3));
                preview = null;
                break;
            case FREEHAND:
                layers.get(layerNumber).add(new Point(evt.getX(), evt.getY()));
                break;
            case LINE:
                layers.get(layerNumber).add(new Line(x1, y1, x2, y2));
                preview = null;
                break;
        }
    }//GEN-LAST:event_formMouseReleased

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        try {
            for (int j = 0; j < layers.size(); j++) {
                for (int i = 0; i < layers.get(j).size(); i++) {

                    layers.get(j).get(i).draw(g, colors.get(j));
                }
            }
        } catch (Exception e) {
        }

        try {
            preview.draw(g, Color.gray);
        } catch (Exception e) {
        }

    }

    public ArrayList<Color> getColors() {
        return colors;
    }

    /**
     * Sets the colors of all the layers.
     * @param colors 
     */
    public void setColors(ArrayList<Color> colors) {
        this.colors = colors;
    }

    /**
     * Changes the current layer
     * @param x - the layer number that the user wants to change to.
     */
    public void changeLayer(int x) {
        layerNumber = x;
    }

    /**
     * Adds a layer with the color black as default.
     */
    public void addLayer() {
        layers.add(new ArrayList<Shape>());
        colors.add(Color.BLACK);
    }

    /**
     * Returns the arraylist containing all the layers.
     * @return the arraylist containing all the layers.
     */
    public ArrayList<ArrayList<Shape>> getLayers() {
        return layers;
    }

    /**
     * Removes the layer at the index specified
     * @param index index that the layer will be removed from.
     */
    public void removeLayer(int index) {
        layers.remove(index);
    }

    /**
     * gets the color of the panel
     * @return the current color of the layer selected.
     */
    public Color getC() {
        return colors.get(layerNumber);
    }

    /**
     * Sets the color of the 
     * @param c 
     */
    public void setC(Color c) {
        colors.set(layerNumber, c);
    }

    /**
     * Starts the timer
     */
    public void startTimer() {
        t1.start();
    }

    public void setMode(MODE mode) {
        this.mode = mode;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private class TimerListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            //updates panel
            repaint();
        } //end of action performed method
    } //end of TimerListener Class
}
