/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paintprogram;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.plaf.metal.MetalScrollBarUI;
import shape.Rectangle;

/**
 *
 * @author SEAN AND ONLY SEAN
 */
public class PaintingFrame extends javax.swing.JFrame {
    //listmodel for layers.
    private DefaultListModel listModel;

    /**
     * Creates new form PaintingFrame
     */
    public PaintingFrame() {
        initComponents();
        //starts the timer of the panel.
        paintingPanel.startTimer();

        //for layers
        listModel = new DefaultListModel();
        listModel.addElement("Background");
        listModel.addElement("Layer 1");
        LayersList.setModel(listModel);
        LayersList.setSelectedIndex(1);
        //defaults to the move tool when the program is started.
        paintingPanel.setMode(MODE.MOVE);

    }

    //for layers
    public void addLayer(String s) {
        listModel.addElement(s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        specificTools = new javax.swing.JPanel();
        blankPanel = new javax.swing.JPanel();
        scaleControls = new javax.swing.JPanel();
        fromCorner = new javax.swing.JCheckBox();
        scaleValue = new javax.swing.JTextField();
        drawControls = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        freeHandDraw = new javax.swing.JToggleButton();
        polygonDraw = new javax.swing.JToggleButton();
        toggleRect = new javax.swing.JToggleButton();
        toggleCircle = new javax.swing.JToggleButton();
        squareToggle = new javax.swing.JToggleButton();
        triangleToggle = new javax.swing.JToggleButton();
        lineToggle = new javax.swing.JToggleButton();
        shapesControls = new javax.swing.JPanel();
        moveUp = new javax.swing.JButton();
        moveDown = new javax.swing.JButton();
        moveLeft = new javax.swing.JButton();
        moveRight = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        LayersList = new javax.swing.JList<>();
        newLayer = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        moveF = new javax.swing.JButton();
        moveB = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        opacitySlider = new javax.swing.JSlider();
        opacityLabel = new javax.swing.JLabel();
        paintingPanel = new paintprogram.PaintingPanel();
        colorPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        moveToggle = new javax.swing.JToggleButton();
        toolBox = new javax.swing.JLabel();
        drawButton = new javax.swing.JToggleButton();
        scaleButton = new javax.swing.JToggleButton();
        exportButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        specificTools.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout blankPanelLayout = new javax.swing.GroupLayout(blankPanel);
        blankPanel.setLayout(blankPanelLayout);
        blankPanelLayout.setHorizontalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 732, Short.MAX_VALUE)
        );
        blankPanelLayout.setVerticalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );

        specificTools.add(blankPanel, "card5");

        fromCorner.setText("From Corner");
        fromCorner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromCornerActionPerformed(evt);
            }
        });

        scaleValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                scaleValueKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout scaleControlsLayout = new javax.swing.GroupLayout(scaleControls);
        scaleControls.setLayout(scaleControlsLayout);
        scaleControlsLayout.setHorizontalGroup(
            scaleControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scaleControlsLayout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addComponent(fromCorner)
                .addGap(101, 101, 101)
                .addComponent(scaleValue, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(289, Short.MAX_VALUE))
        );
        scaleControlsLayout.setVerticalGroup(
            scaleControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scaleControlsLayout.createSequentialGroup()
                .addGroup(scaleControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromCorner)
                    .addComponent(scaleValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        specificTools.add(scaleControls, "card4");

        jToolBar2.setRollover(true);

        freeHandDraw.setText("Freehand");
        freeHandDraw.setFocusable(false);
        freeHandDraw.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        freeHandDraw.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        freeHandDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freeHandDrawActionPerformed(evt);
            }
        });
        jToolBar2.add(freeHandDraw);

        polygonDraw.setText("Polygon");
        polygonDraw.setFocusable(false);
        polygonDraw.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        polygonDraw.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        polygonDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polygonDrawActionPerformed(evt);
            }
        });
        jToolBar2.add(polygonDraw);

        toggleRect.setText("Rectangle");
        toggleRect.setFocusable(false);
        toggleRect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toggleRect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toggleRect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                toggleRectMousePressed(evt);
            }
        });
        jToolBar2.add(toggleRect);

        toggleCircle.setText("circle");
        toggleCircle.setFocusable(false);
        toggleCircle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toggleCircle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toggleCircle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                toggleCircleMousePressed(evt);
            }
        });
        jToolBar2.add(toggleCircle);

        squareToggle.setText("Square");
        squareToggle.setFocusable(false);
        squareToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        squareToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        squareToggle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                squareToggleMousePressed(evt);
            }
        });
        jToolBar2.add(squareToggle);

        triangleToggle.setText("Triangle");
        triangleToggle.setFocusable(false);
        triangleToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        triangleToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        triangleToggle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                triangleToggleMouseClicked(evt);
            }
        });
        jToolBar2.add(triangleToggle);

        lineToggle.setText("Line");
        lineToggle.setFocusable(false);
        lineToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineToggleActionPerformed(evt);
            }
        });
        jToolBar2.add(lineToggle);

        javax.swing.GroupLayout drawControlsLayout = new javax.swing.GroupLayout(drawControls);
        drawControls.setLayout(drawControlsLayout);
        drawControlsLayout.setHorizontalGroup(
            drawControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drawControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                .addContainerGap())
        );
        drawControlsLayout.setVerticalGroup(
            drawControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, drawControlsLayout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        specificTools.add(drawControls, "card2");

        moveUp.setText("UP");
        moveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpActionPerformed(evt);
            }
        });

        moveDown.setText("Down");
        moveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownActionPerformed(evt);
            }
        });

        moveLeft.setText("Left");
        moveLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveLeftActionPerformed(evt);
            }
        });

        moveRight.setText("Right");
        moveRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRightActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout shapesControlsLayout = new javax.swing.GroupLayout(shapesControls);
        shapesControls.setLayout(shapesControlsLayout);
        shapesControlsLayout.setHorizontalGroup(
            shapesControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shapesControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(moveUp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveDown)
                .addGap(11, 11, 11)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(moveLeft)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveRight)
                .addContainerGap(467, Short.MAX_VALUE))
        );
        shapesControlsLayout.setVerticalGroup(
            shapesControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shapesControlsLayout.createSequentialGroup()
                .addGroup(shapesControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(shapesControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(moveRight)
                        .addComponent(moveLeft))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(shapesControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(moveUp)
                        .addComponent(moveDown)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        specificTools.add(shapesControls, "card3");

        LayersList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Background" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        LayersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        LayersList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        LayersList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LayersListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(LayersList);

        newLayer.setText("New Layer");
        newLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLayerActionPerformed(evt);
            }
        });

        delete.setText("delete layer");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        moveF.setText("Up");
        moveF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveFActionPerformed(evt);
            }
        });

        moveB.setText("down");
        moveB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBActionPerformed(evt);
            }
        });

        opacitySlider.setMaximum(255);
        opacitySlider.setValue(255);
        opacitySlider.setDoubleBuffered(true);
        opacitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                opacitySliderStateChanged(evt);
            }
        });

        opacityLabel.setText("Opacity");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opacitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(opacityLabel)
                        .addGap(0, 89, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(opacityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(opacitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        paintingPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout paintingPanelLayout = new javax.swing.GroupLayout(paintingPanel);
        paintingPanel.setLayout(paintingPanelLayout);
        paintingPanelLayout.setHorizontalGroup(
            paintingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        paintingPanelLayout.setVerticalGroup(
            paintingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        colorPanel.setBackground(new java.awt.Color(0, 0, 0));
        colorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        colorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                colorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout colorPanelLayout = new javax.swing.GroupLayout(colorPanel);
        colorPanel.setLayout(colorPanelLayout);
        colorPanelLayout.setHorizontalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 27, Short.MAX_VALUE)
        );
        colorPanelLayout.setVerticalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );

        moveToggle.setText("Move");
        moveToggle.setFocusable(false);
        moveToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moveToggle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                moveToggleMousePressed(evt);
            }
        });

        toolBox.setText("Tools Palette");

        drawButton.setText("Draw");
        drawButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawButtonMousePressed(evt);
            }
        });

        scaleButton.setText("Scale");
        scaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scaleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toolBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(drawButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scaleButton))
                    .addComponent(moveToggle))
                .addGap(40, 40, 40))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(toolBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drawButton)
                    .addComponent(scaleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveToggle))
        );

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(specificTools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(paintingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(newLayer)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(moveF))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(delete)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(moveB))
                                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 37, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(exportButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(specificTools, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paintingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newLayer)
                            .addComponent(moveF))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delete)
                            .addComponent(moveB))
                        .addGap(73, 73, 73)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, Short.MAX_VALUE)
                        .addComponent(exportButton)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This is called when the draw button is pressed.
     * @param evt the mouse event.
     */
    private void drawButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawButtonMousePressed
        //sets the mode to rectangle.
        paintingPanel.setMode(MODE.RECTANGLE);
        //sets the graphcial components:
        scaleControls.setVisible(false);
        drawControls.setVisible(true);
        shapesControls.setVisible(false);
        blankPanel.setVisible(false);
        toggleRect.setSelected(false);
        toggleCircle.setSelected(false);
        moveToggle.setSelected(false);
        squareToggle.setSelected(false);
        triangleToggle.setSelected(false);
        freeHandDraw.setSelected(false);
        polygonDraw.setSelected(false);
        scaleButton.setSelected(false);
        lineToggle.setSelected(false);
    }//GEN-LAST:event_drawButtonMousePressed

    /**
     * This is called when the draw rectangle button is pressed.
     * @param evt the mouseevent.
     */
    private void toggleRectMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toggleRectMousePressed
        //sets the mode to rectangle
        paintingPanel.setMode(MODE.RECTANGLE);
        //sets the graphical components
        scaleControls.setVisible(false);
        drawButton.setSelected(false);
        toggleCircle.setSelected(false);
        blankPanel.setVisible(false);
        moveToggle.setSelected(false);
        squareToggle.setSelected(false);
        triangleToggle.setSelected(false);
        freeHandDraw.setSelected(false);
        polygonDraw.setSelected(false);
        lineToggle.setSelected(false);
        scaleButton.setSelected(false);
    }//GEN-LAST:event_toggleRectMousePressed

    /**
     * This is called when the draw circle toggle button is pressed.
     * @param evt the mouseevent 
     */
    private void toggleCircleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toggleCircleMousePressed
        //sets the mode to circle
        paintingPanel.setMode(MODE.CIRCLE);
        //sets the graphcial components
        toggleRect.setSelected(false);
        drawButton.setSelected(false);
        blankPanel.setVisible(false);
        moveToggle.setSelected(false);
        squareToggle.setSelected(false);
        triangleToggle.setSelected(false);
        freeHandDraw.setSelected(false);
        polygonDraw.setSelected(false);
        scaleButton.setSelected(false);
        lineToggle.setSelected(false);
    }//GEN-LAST:event_toggleCircleMousePressed

    /**
     * This is called when the move toggle button is pressed.
     * @param evt the mouseevent.
     */
    private void moveToggleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveToggleMousePressed
        //sets the mode to move.
        paintingPanel.setMode(MODE.MOVE);
        //sets the graphical components.
        drawControls.setVisible(false);
        shapesControls.setVisible(true);
        scaleControls.setVisible(false);
        blankPanel.setVisible(false);
        toggleRect.setSelected(false);
        toggleCircle.setSelected(false);
        drawButton.setSelected(false);
        squareToggle.setSelected(false);
        triangleToggle.setSelected(false);
        scaleButton.setSelected(false);
        freeHandDraw.setSelected(false);
        polygonDraw.setSelected(false);
        lineToggle.setSelected(false);
    }//GEN-LAST:event_moveToggleMousePressed

    /**
     * This is called when the draw square toggle button is pressed
     * @param evt the mouse event.
     */
    private void squareToggleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareToggleMousePressed
        //sets the mode to square.
        paintingPanel.setMode(MODE.SQUARE);
        //sets the graphcal components.
        toggleRect.setSelected(false);
        toggleCircle.setSelected(false);
        blankPanel.setVisible(false);
        moveToggle.setSelected(false);
        drawButton.setSelected(false);
        triangleToggle.setSelected(false);
        freeHandDraw.setSelected(false);
        polygonDraw.setSelected(false);
        scaleButton.setSelected(false);
        lineToggle.setSelected(false);
    }//GEN-LAST:event_squareToggleMousePressed

    /**
     * This is called when the colorPanel jPanel is clicked on.
     * @param evt the mouse event.
     */
    private void colorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPanelMouseClicked
        //sets the color from the JColorChooser
        Color c = JColorChooser.showDialog(null, "Choose a color", Color.BLACK);
        //checks if the color chosen is not null:
        if (c != null) {
            //sets the color to the paiting panel
            paintingPanel.setC(c);
            //sets the color of the jPanel to the chosen color.
            colorPanel.setBackground(c);
            //sets the opacity slider to the appropriate level.
            opacitySlider.setValue(paintingPanel.getC().getAlpha());
        }
    }//GEN-LAST:event_colorPanelMouseClicked
    
    /**
     * This is called when the draw triangle button is pressed.
     * @param evt the mouse event.
     */
    private void triangleToggleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_triangleToggleMouseClicked
        //sets the mode to traingle
        paintingPanel.setMode(MODE.TRIANGLE);
        //sets the graphical components.
        toggleRect.setSelected(false);
        toggleCircle.setSelected(false);
        blankPanel.setVisible(false);
        moveToggle.setSelected(false);
        drawButton.setSelected(false);
        squareToggle.setSelected(false);
        freeHandDraw.setSelected(false);
        polygonDraw.setSelected(false);
        scaleButton.setSelected(false);
        lineToggle.setSelected(false);
    }//GEN-LAST:event_triangleToggleMouseClicked

    /**
     * This is called when the draw freehand button is pressed.
     * @param evt the mouse event.
     */
    private void freeHandDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeHandDrawActionPerformed
        //sets the mode to freehand
        paintingPanel.setMode(MODE.FREEHAND);
        //sets the graphcial components
        drawButton.setSelected(false);
        toggleCircle.setSelected(false);
        blankPanel.setVisible(false);
        moveToggle.setSelected(false);
        squareToggle.setSelected(false);
        triangleToggle.setSelected(false);
        toggleRect.setSelected(false);
        polygonDraw.setSelected(false);
        lineToggle.setSelected(false);
        scaleButton.setSelected(false);
    }//GEN-LAST:event_freeHandDrawActionPerformed

    /**
     * This is called when the polygon draw button is pressed.
     * @param evt the mouse event.
     */
    private void polygonDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polygonDrawActionPerformed
        //sets the mode to polygon
        paintingPanel.setMode(MODE.POLYGON);
        //sets the graphical components.
        drawButton.setSelected(false);
        toggleCircle.setSelected(false);
        blankPanel.setVisible(false);
        moveToggle.setSelected(false);
        squareToggle.setSelected(false);
        triangleToggle.setSelected(false);
        freeHandDraw.setSelected(false);
        toggleRect.setSelected(false);
        lineToggle.setSelected(false);
        scaleButton.setSelected(false);
    }//GEN-LAST:event_polygonDrawActionPerformed

    /**
     * This is called when the draw line button is pressed.
     * @param evt the mouse event.
     */
    private void lineToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineToggleActionPerformed
        //sets the mode to line
        paintingPanel.setMode(MODE.LINE);
        //sets the graphical components.
        drawButton.setSelected(false);
        toggleCircle.setSelected(false);
        blankPanel.setVisible(false);
        moveToggle.setSelected(false);
        squareToggle.setSelected(false);
        triangleToggle.setSelected(false);
        freeHandDraw.setSelected(false);
        polygonDraw.setSelected(false);
        toggleRect.setSelected(false);
        scaleButton.setSelected(false);
    }//GEN-LAST:event_lineToggleActionPerformed

    /**
     * This is called when the list is pressed.
     * @param evt the mouse event
     */
    private void LayersListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LayersListMouseClicked
        //gets the index where the user selected and changes to the corresponding layer in the painting panel.
        paintingPanel.changeLayer(LayersList.getSelectedIndex());
        //sets the background of the color panel to the new selected layer's color.
        colorPanel.setBackground(paintingPanel.getC());
        //updates the opacity of the layer.
        opacitySlider.setValue(paintingPanel.getC().getAlpha());
    }//GEN-LAST:event_LayersListMouseClicked

    /**
     * This is called when the newLayer button is pressed.
     * @param evt the mouse event.
     */
    private void newLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newLayerActionPerformed
        //creates a new layer name
        String name = "Layer " + listModel.getSize();
        //adds the new element to the list model with the new layer name.
        listModel.addElement(name);
        //adds the layer to the painting panel.
        paintingPanel.addLayer();
        //selects the layer of the new layer.
        LayersList.setSelectedIndex(listModel.size() - 1);
        //changes correspondingly in the painting panel.
        paintingPanel.changeLayer(listModel.size() - 1);
        //sets the background of the color panel to the new selected layer's color.
        colorPanel.setBackground(paintingPanel.getC());
        //updates the opacity of the layer.
        opacitySlider.setValue(paintingPanel.getC().getAlpha());
    }//GEN-LAST:event_newLayerActionPerformed

    /**
     * This is called when the delete layer button is pressed.
     * @param evt the mouse event.
     */
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        //checks if deleting a layer will result in no layers. If yes, then it will pop up a message telling the user that they cannot do that.
        if (listModel.size() != 1) {
            //removes the layer correspondingly from the painting panel.
            paintingPanel.removeLayer(LayersList.getSelectedIndex());
            //also removes the color that is associated to the layer.
            paintingPanel.getColors().remove(LayersList.getSelectedIndex());
            //removes the layer in the graphical list.
            listModel.remove(LayersList.getSelectedIndex());
            //changes the selected index to the new last index in both the graphcial list and the painting panel.
            LayersList.setSelectedIndex(listModel.size() - 1);
            paintingPanel.changeLayer(listModel.size() - 1);
            //sets the background of the color panel to the new selected layer's color.
            colorPanel.setBackground(paintingPanel.getC());
        } else {
            //shows the popup that tells the user that they cannot delete the last layer.
            JOptionPane.showMessageDialog(this, "バカじゃないの？ You would not have a layer to draw on!");
        }
    }//GEN-LAST:event_deleteActionPerformed

    /**
     * This is called when the user wants to move a layer forward.
     * @param evt the mouse event.
     */
    private void moveFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveFActionPerformed
        //checks if it is the outermost layer. If not, it will just swap itself with the layer in front
        if (LayersList.getSelectedIndex() != listModel.size() - 1) {
            Collections.swap(paintingPanel.getLayers(), LayersList.getSelectedIndex(), LayersList.getSelectedIndex() + 1);
            Collections.swap(paintingPanel.getColors(), LayersList.getSelectedIndex(), LayersList.getSelectedIndex() + 1);
            Object o = listModel.remove(LayersList.getSelectedIndex() + 1);
            listModel.add(LayersList.getSelectedIndex(), o);

        }
    }//GEN-LAST:event_moveFActionPerformed

    /**
     * This is called when the user wants to move a layer backwards.
     * @param evt the mouse event.
     */
    private void moveBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBActionPerformed
        //checks if it is the innermost layer. If not, it will just swap itself with the layer behind.
        if (LayersList.getSelectedIndex() != 0) {
            Collections.swap(paintingPanel.getLayers(), LayersList.getSelectedIndex(), LayersList.getSelectedIndex() - 1);
            Collections.swap(paintingPanel.getColors(), LayersList.getSelectedIndex(), LayersList.getSelectedIndex() - 1);
            Object o = listModel.remove(LayersList.getSelectedIndex() - 1);
            listModel.add(LayersList.getSelectedIndex() + 1, o);
        }
    }//GEN-LAST:event_moveBActionPerformed

    /**
     * This is called when the user changes the opacity of the layer.
     * @param evt the mouse event.
     */
    private void opacitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_opacitySliderStateChanged
        //gets the color of the panel.
        int r = paintingPanel.getC().getRed();
        int b = paintingPanel.getC().getBlue();
        int g = paintingPanel.getC().getGreen();
        
        //sets the alpha value based on the slider.
        paintingPanel.setC(new Color(r, g, b, opacitySlider.getValue()));
        colorPanel.setBackground(paintingPanel.getC());
    }//GEN-LAST:event_opacitySliderStateChanged

    /**
     * Moves the layer of shapes up by 3 every time it is called
     * @param evt the mouse event.
     */
    private void moveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpActionPerformed
        //goes through every shape in the layer.
        for (int i = 0; i < paintingPanel.getLayers().get(LayersList.getSelectedIndex()).size(); i++) {
            paintingPanel.getLayers().get(LayersList.getSelectedIndex()).get(i).translate(0, -3);
        }
    }//GEN-LAST:event_moveUpActionPerformed

    /**
     * Moves the layer of shapes down by three every time it is called.
     * @param evt the mouse event.
     */
    private void moveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownActionPerformed
        //goes through every shape in the layer.
        for (int i = 0; i < paintingPanel.getLayers().get(LayersList.getSelectedIndex()).size(); i++) {
            paintingPanel.getLayers().get(LayersList.getSelectedIndex()).get(i).translate(0, 3);
        }
    }//GEN-LAST:event_moveDownActionPerformed

    /**
     * Moves the layer of shapes left by three every time it is called.
     * @param evt the mouse event.
     */
    private void moveLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveLeftActionPerformed
        //goes through every shape in the layer.
        for (int i = 0; i < paintingPanel.getLayers().get(LayersList.getSelectedIndex()).size(); i++) {
            paintingPanel.getLayers().get(LayersList.getSelectedIndex()).get(i).translate(-3, 0);
        }
    }//GEN-LAST:event_moveLeftActionPerformed

    /**
     * Moves the layer of shapes right by three every time it is called.
     * @param evt the mouse event.
     */
    private void moveRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRightActionPerformed
        //goes through every shape in the layer.
        for (int i = 0; i < paintingPanel.getLayers().get(LayersList.getSelectedIndex()).size(); i++) {
            paintingPanel.getLayers().get(LayersList.getSelectedIndex()).get(i).translate(3, 0);
        }
    }//GEN-LAST:event_moveRightActionPerformed

    /**
     * This is called when the user wants to scale something.
     * @param evt the mouse event.
     */
    private void scaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleButtonActionPerformed
        //sets the mode to scale
        paintingPanel.setMode(MODE.SCALE);
        //sets the graphcial components.
        drawControls.setVisible(false);
        shapesControls.setVisible(false);
        scaleControls.setVisible(true);
        blankPanel.setVisible(false);
        shapesControls.setVisible(false);
        toggleRect.setSelected(false);
        toggleCircle.setSelected(false);
        moveToggle.setSelected(false);
        drawButton.setSelected(false);
        squareToggle.setSelected(false);
        triangleToggle.setSelected(false);
        freeHandDraw.setSelected(false);
        polygonDraw.setSelected(false);
        lineToggle.setSelected(false);

    }//GEN-LAST:event_scaleButtonActionPerformed

    //if selected, scales from corner of shape
    private void fromCornerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromCornerActionPerformed

    }//GEN-LAST:event_fromCornerActionPerformed

    /**
     * This is called whenever a key is pressed in the text field.
     * @param evt the mouse event
     */
    private void scaleValueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_scaleValueKeyPressed
        //if the user presses enter, then it scales all the shapes in the layer by that factor.
        //this is if the user chose to scale from the corner
        if (fromCorner.isSelected()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                for (int i = 0; i < paintingPanel.getLayers().get(LayersList.getSelectedIndex()).size(); i++) {
                    paintingPanel.getLayers().get(LayersList.getSelectedIndex()).get(i)
                            .scale((((double) Integer.parseInt(scaleValue.getText())) / 100),
                                    paintingPanel.getLayers().get(LayersList.getSelectedIndex()).get(i).getPoint().getX(),
                                    paintingPanel.getLayers().get(LayersList.getSelectedIndex()).get(i).getPoint().getY());
                }
            }
        //this is if the user chose to scale from the origin.
        } else {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                for (int i = 0; i < paintingPanel.getLayers().get(LayersList.getSelectedIndex()).size(); i++) {
                    paintingPanel.getLayers().get(LayersList.getSelectedIndex()).get(i).scale((((double) Integer.parseInt(scaleValue.getText())) / 100));
                }
            }
        }
    }//GEN-LAST:event_scaleValueKeyPressed

    /**
     * Creates an image from the jPanel given.
     * @param panel the JPanel that will be converted to an image.
     * @return returns the bufferedImage
     */
    public BufferedImage createImage(JPanel panel) {
        //finds the width and height of the panel so that the image can be saved 1:1
        int w = panel.getWidth();
        int h = panel.getHeight();
        //creates the bufferedImage.
        BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        //creates a graphics 2D instance. This allows for things to be drawn into the buffered image
        Graphics2D g = bi.createGraphics();
        //draws the panel to the buffered image.
        panel.paint(g);
        return bi;
    }
    
    /**
     * Exports the image to the project folder when the button is triggered.
     * @param evt mouse event
     */
    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        
        try {
            //shows the developer where the file is being sent to.
            System.out.println(new File(".").getAbsolutePath());
            ImageIO.write(createImage(paintingPanel), "png", new File(System.currentTimeMillis()+".png")); 
        } catch (IOException e) {}
    }//GEN-LAST:event_exportButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaintingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaintingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaintingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaintingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaintingFrame().setVisible(true);
            }
        });
    }
    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> LayersList;
    private javax.swing.JPanel blankPanel;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JButton delete;
    private javax.swing.JToggleButton drawButton;
    private javax.swing.JPanel drawControls;
    private javax.swing.JButton exportButton;
    private javax.swing.JToggleButton freeHandDraw;
    private javax.swing.JCheckBox fromCorner;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToggleButton lineToggle;
    private javax.swing.JButton moveB;
    private javax.swing.JButton moveDown;
    private javax.swing.JButton moveF;
    private javax.swing.JButton moveLeft;
    private javax.swing.JButton moveRight;
    private javax.swing.JToggleButton moveToggle;
    private javax.swing.JButton moveUp;
    private javax.swing.JButton newLayer;
    private javax.swing.JLabel opacityLabel;
    private javax.swing.JSlider opacitySlider;
    private paintprogram.PaintingPanel paintingPanel;
    private javax.swing.JToggleButton polygonDraw;
    private javax.swing.JToggleButton scaleButton;
    private javax.swing.JPanel scaleControls;
    private javax.swing.JTextField scaleValue;
    private javax.swing.JPanel shapesControls;
    private javax.swing.JPanel specificTools;
    private javax.swing.JToggleButton squareToggle;
    private javax.swing.JToggleButton toggleCircle;
    private javax.swing.JToggleButton toggleRect;
    private javax.swing.JLabel toolBox;
    private javax.swing.JToggleButton triangleToggle;
    // End of variables declaration//GEN-END:variables
}

